@function -zf-flex-justify($text-direction){
  $-zf-flex-justify: (
    'left': if($text-direction == rtl, flex-end, flex-start),
    'right': if($text-direction == rtl, flex-start, flex-end),
    'center': center,
    'justify': space-between,
    'spaced': space-around,
  );

  @return $-zf-flex-justify;
}


$-zf-flex-align: (
  'top': flex-start,
  'bottom': flex-end,
  'middle': center,
  'stretch': stretch,
);

$-zf-flex-direction: (
  'row': row,
  'row-reverse': row-reverse,
  'column': column,
  'column-reverse': column-reverse,
);

/// Включает flexbox путем добавления `display: flex` в элемент.
@mixin flex {
  display: flex;
}

/// Горизонтальное или вертикальное выравнивание элементов внутри flex контейнера.
///
/// @param {Keyword} $x [null] - Горизонтальное выравнивание. Может принимать значения `left`, `right`, `center`, `justify` или `spaced`. Или установлено в `null` (по умолчанию), что однозначно не установленному горизонтальному выравниванию.
/// @param {Keyword} $y [null] - Вертикальное выравнивание. Может принимать значения `top`, `bottom`, `middle` или `stretch`. Или установлено в `null` (по умолчанию), что однозначно не установленному вертикальному выравниванию.
@mixin flex-align($x: null, $y: null) {
  @if $x {
    @if map-has-key($-zf-flex-justify, $x) {
      $x: map-get($-zf-flex-justify, $x);
    }
    @else {
      @warn 'flex-grid-row-align(): #{$x} is not a valid value for horizontal alignment. Use left, right, center, justify, or spaced.';
    }
  }

  @if $y {
    @if map-has-key($-zf-flex-align, $y) {
      $y: map-get($-zf-flex-align, $y);
    }
    @else {
      @warn 'flex-grid-row-align(): #{$y} is not a valid value for vertical alignment. Use top, bottom, middle, or stretch.';
    }
  }

  justify-content: $x;
  align-items: $y;
}

/// Вертикальное выравнивание отдельной колонки внутри flex строки. Применяйте этот миксин к flex колонке.
///
/// @param {Keyword} $y [null] - Вертикальное выравнивание. Может принимать значения `top`, `bottom`, `middle` или `stretch`. Или установлено в `null` (по умолчанию), что однозначно не установленному вертикальному выравниванию.
@mixin flex-align-self($y: null) {
  @if $y {
    @if map-has-key($-zf-flex-align, $y) {
      $y: map-get($-zf-flex-align, $y);
    }
    @else {
      @warn 'flex-grid-column-align(): #{$y} is not a valid value for alignment. Use top, bottom, middle, or stretch.';
    }
  }

  align-self: $y;
}

/// Изменение порядка следования flex потомков. Потомки с более низким значением следуют в макете сначала.
/// @param {Number} $order [0] - Номер по порядку.
@mixin flex-order($order: 0) {
  order: $order;
}

/// Изменение flex-direction
/// @param {Keyword} $direction [row] - Flex направление. Может принимать значения
///   - row (по умолчанию): такое же как у текста
///   - row-reverse: противоположное тексту
///   - column: то же что и row, но по вертикали
///   - column-reverse: то же что и row-reverse, но по вертикали
@mixin flex-direction($direction: row) {
  flex-direction: $direction;
}
